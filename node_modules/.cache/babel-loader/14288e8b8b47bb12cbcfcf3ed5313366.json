{"ast":null,"code":"var _jsxFileName = \"D:\\\\REACT JS\\\\React Upforce\\\\daily-todo-fb-final\\\\src\\\\modules\\\\Home\\\\HomeContaciner.js\";\n\n/* eslint-disable no-shadow */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { CronJob } from 'cron';\nimport { fetchLoggedInUserData } from '../../redux/authActions';\nimport { fetchTodos } from '../../redux/todoActions';\nimport { fetchPreviousDayTodos } from '../../redux/previousdayActions';\nimport { fetchNotificationTime, setNotificationTime } from '../../redux/notificationActions';\nimport { noop, notifyMe, previousDay, lastFriday, formatedTime } from '../../utils';\nimport firebase from '../../firebase/firebase';\nimport Home from './Home';\n\nconst HomeContaciner = ({\n  fetchLoggedInUserData,\n  fetchTodos,\n  fetchPreviousDayTodos,\n  fetchNotificationTime,\n  setNotificationTime,\n  changedMorningTime,\n  changedEveningTime,\n  date\n}) => {\n  const prevMTimeRef = useRef();\n  const prevETimeRef = useRef();\n  useEffect(() => {\n    if (formatedTime() > formatedTime(changedMorningTime)) {\n      notifyMe(formatedTime(changedMorningTime), formatedTime(changedEveningTime));\n    }\n  }, []);\n  useEffect(() => {\n    prevMTimeRef.current = changedMorningTime;\n    prevETimeRef.current = changedEveningTime;\n    const job = new CronJob('00 */1 * * * *', () => {\n      const morningTime = formatedTime(prevMTimeRef.current);\n      const eveningTime = formatedTime(prevETimeRef.current);\n      const currentTime = formatedTime();\n\n      if (morningTime === currentTime || eveningTime === currentTime) {\n        notifyMe(morningTime, eveningTime);\n      }\n    });\n    job.start();\n  }, [changedMorningTime, changedEveningTime]);\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(currentUser => {\n      if (currentUser) {\n        fetchLoggedInUserData(currentUser);\n        fetchTodos(currentUser, date);\n        fetchNotificationTime(currentUser).then(res => {\n          if (res.value.data === undefined) {\n            setNotificationTime(currentUser, changedMorningTime, changedEveningTime);\n          }\n        });\n        if (moment(new Date()).format('dddd') === 'Monday') fetchPreviousDayTodos(currentUser, lastFriday);else fetchPreviousDayTodos(currentUser, previousDay);\n      }\n    });\n  }, []);\n  return React.createElement(Home, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  });\n};\n\nHomeContaciner.propTypes = {\n  fetchLoggedInUserData: PropTypes.func,\n  fetchTodos: PropTypes.func,\n  fetchPreviousDayTodos: PropTypes.func,\n  fetchNotificationTime: PropTypes.func,\n  setNotificationTime: PropTypes.func,\n  date: PropTypes.string,\n  changedMorningTime: PropTypes.string,\n  changedEveningTime: PropTypes.string\n};\nHomeContaciner.defaultProps = {\n  fetchLoggedInUserData: noop,\n  fetchTodos: noop,\n  fetchPreviousDayTodos: noop,\n  fetchNotificationTime: noop,\n  setNotificationTime: noop,\n  date: '',\n  changedMorningTime: '',\n  changedEveningTime: ''\n};\n\nconst mapStateToProps = state => ({\n  date: state.todo.date,\n  changedMorningTime: state.notification.changedMorningTime,\n  changedEveningTime: state.notification.changedEveningTime\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchLoggedInUserData: user => dispatch(fetchLoggedInUserData(user)),\n  fetchTodos: (user, date) => dispatch(fetchTodos(user, date)),\n  fetchPreviousDayTodos: (user, date) => dispatch(fetchPreviousDayTodos(user, date)),\n  fetchNotificationTime: user => dispatch(fetchNotificationTime(user)),\n  setNotificationTime: (user, mTime, eTime) => dispatch(setNotificationTime(user, mTime, eTime))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeContaciner);","map":{"version":3,"sources":["D:/REACT JS/React Upforce/daily-todo-fb-final/src/modules/Home/HomeContaciner.js"],"names":["React","useEffect","useRef","useState","connect","PropTypes","moment","CronJob","fetchLoggedInUserData","fetchTodos","fetchPreviousDayTodos","fetchNotificationTime","setNotificationTime","noop","notifyMe","previousDay","lastFriday","formatedTime","firebase","Home","HomeContaciner","changedMorningTime","changedEveningTime","date","prevMTimeRef","prevETimeRef","current","job","morningTime","eveningTime","currentTime","start","auth","onAuthStateChanged","currentUser","then","res","value","data","undefined","Date","format","propTypes","func","string","defaultProps","mapStateToProps","state","todo","notification","mapDispatchToProps","dispatch","user","mTime","eTime"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { CronJob } from 'cron';\n\nimport { fetchLoggedInUserData } from '../../redux/authActions';\nimport { fetchTodos } from '../../redux/todoActions';\nimport { fetchPreviousDayTodos } from '../../redux/previousdayActions';\nimport { fetchNotificationTime, setNotificationTime } from '../../redux/notificationActions';\nimport {\n  noop, notifyMe, previousDay, lastFriday, formatedTime,\n} from '../../utils';\nimport firebase from '../../firebase/firebase';\nimport Home from './Home';\n\nconst HomeContaciner = ({\n  fetchLoggedInUserData,\n  fetchTodos,\n  fetchPreviousDayTodos,\n  fetchNotificationTime,\n  setNotificationTime,\n  changedMorningTime,\n  changedEveningTime,\n  date,\n}) => {\n  const prevMTimeRef = useRef();\n  const prevETimeRef = useRef();\n\n  useEffect(() => {\n    if (formatedTime() > formatedTime(changedMorningTime)) {\n      notifyMe(formatedTime(changedMorningTime), formatedTime(changedEveningTime));\n    }\n  }, []);\n\n  useEffect(() => {\n    prevMTimeRef.current = changedMorningTime;\n    prevETimeRef.current = changedEveningTime;\n    const job = new CronJob('00 */1 * * * *', (() => {\n      const morningTime = formatedTime(prevMTimeRef.current);\n      const eveningTime = formatedTime(prevETimeRef.current);\n      const currentTime = formatedTime();\n      if (morningTime === currentTime || eveningTime === currentTime) {\n        notifyMe(morningTime, eveningTime);\n      }\n    }));\n    job.start();\n  }, [changedMorningTime, changedEveningTime]);\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(currentUser => {\n      if (currentUser) {\n        fetchLoggedInUserData(currentUser);\n        fetchTodos(currentUser, date);\n        fetchNotificationTime(currentUser).then(res => {\n          if (res.value.data === undefined) {\n            setNotificationTime(currentUser, changedMorningTime, changedEveningTime);\n          }\n        });\n        if (moment(new Date()).format('dddd') === 'Monday') fetchPreviousDayTodos(currentUser, lastFriday);\n        else fetchPreviousDayTodos(currentUser, previousDay);\n      }\n    });\n  }, []);\n\n  return (\n    <Home />\n  );\n};\n\nHomeContaciner.propTypes = {\n  fetchLoggedInUserData: PropTypes.func,\n  fetchTodos: PropTypes.func,\n  fetchPreviousDayTodos: PropTypes.func,\n  fetchNotificationTime: PropTypes.func,\n  setNotificationTime: PropTypes.func,\n  date: PropTypes.string,\n  changedMorningTime: PropTypes.string,\n  changedEveningTime: PropTypes.string,\n};\n\nHomeContaciner.defaultProps = {\n  fetchLoggedInUserData: noop,\n  fetchTodos: noop,\n  fetchPreviousDayTodos: noop,\n  fetchNotificationTime: noop,\n  setNotificationTime: noop,\n  date: '',\n  changedMorningTime: '',\n  changedEveningTime: '',\n};\n\nconst mapStateToProps = state => ({\n  date: state.todo.date,\n  changedMorningTime: state.notification.changedMorningTime,\n  changedEveningTime: state.notification.changedEveningTime,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchLoggedInUserData: user => dispatch(fetchLoggedInUserData(user)),\n  fetchTodos: (user, date) => dispatch(fetchTodos(user, date)),\n  fetchPreviousDayTodos: (user, date) => dispatch(fetchPreviousDayTodos(user, date)),\n  fetchNotificationTime: user => dispatch(fetchNotificationTime(user)),\n  setNotificationTime: (user, mTime, eTime) => dispatch(setNotificationTime(user, mTime, eTime)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeContaciner);\n"]},"metadata":{},"sourceType":"module"}