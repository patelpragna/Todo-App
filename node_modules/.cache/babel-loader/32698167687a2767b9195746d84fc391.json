{"ast":null,"code":"var _jsxFileName = \"D:\\\\REACT JS\\\\React Upforce\\\\daily-todo-fb-final\\\\src\\\\modules\\\\Home\\\\TodoList\\\\TodoListItem\\\\TodoListItem.js\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport IconButton from '@material-ui/core/IconButton';\nimport moment from 'moment';\nimport { noop, formatedDate } from '../../../../utils';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    padding: 0\n  },\n  momentTag: {\n    fontSize: '0.8rem'\n  },\n  inline: {\n    display: 'inline',\n    fontSize: '0.9rem'\n  },\n  listItemTextLineThrough: {\n    color: '#999898',\n    textDecoration: 'line-through',\n    fontStyle: 'italic'\n  },\n  card: {\n    maxWidth: 250,\n    marginBottom: theme.spacing(2)\n  },\n  cardBackground: {\n    maxWidth: 250,\n    marginBottom: theme.spacing(2),\n    backgroundColor: '#ffffff98'\n  },\n  deleteButton: {\n    color: red[500]\n  },\n  greenButton: {\n    color: 'green'\n  },\n  chip: {\n    fontSize: '0.7rem !important'\n  },\n  chipIcon: {\n    fontSize: '0.9rem !important'\n  },\n  isHidden: {\n    display: 'none'\n  }\n}));\n\nfunction TodoCard({\n  deleteTodoButtonHandler,\n  markTodoDoneButtonHandler,\n  editTodoButtonHandler,\n  todo,\n  user,\n  date,\n  calendarStrings,\n  refresh\n}) {\n  const classes = useStyles();\n  let createdTime = moment(todo.createdAt);\n  let allowEditTill = moment(todo.createdAt).add(2, 'hours');\n  useEffect(() => {\n    createdTime = moment(todo.createdAt);\n    allowEditTill = moment(todo.createdAt).add(2, 'hours');\n  }, [refresh]);\n  return React.createElement(React.Fragment, null, React.createElement(List, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(ListItem, {\n    alignItems: \"flex-start\",\n    className: classes.listItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Tooltip, {\n    title: todo.isDone ? 'Todo Done' : 'Mark as Done',\n    arrow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: event => markTodoDoneButtonHandler(event, todo),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, todo.isDone ? React.createElement(CheckCircleIcon, {\n    className: todo.isDone ? classes.greenButton : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }) : React.createElement(CheckCircleOutlineIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))), React.createElement(ListItemText, {\n    className: todo.isDone ? classes.listItemTextLineThrough : null,\n    primary: todo.todo,\n    secondary: React.createElement(React.Fragment, null, React.createElement(Typography, {\n      component: \"span\",\n      variant: \"body2\",\n      className: classes.inline,\n      color: \"textPrimary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, user.email), \"\\xA0\\u2014\\xA0\", React.createElement(Moment, {\n      className: classes.momentTag,\n      calendar: calendarStrings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, todo.createdAt)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(ListItemSecondaryAction, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, moment(date).isSameOrAfter(formatedDate(new Date())) && React.createElement(React.Fragment, null, moment(createdTime).isBefore(allowEditTill) && allowEditTill > moment(+new Date()).toDate() && React.createElement(React.Fragment, null, React.createElement(Tooltip, {\n    title: \"Edit\",\n    arrow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: event => editTodoButtonHandler(event, todo),\n    className: todo.isDone ? classes.isHidden : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(EditIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }))), React.createElement(Tooltip, {\n    title: \"Delete\",\n    arrow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: event => deleteTodoButtonHandler(event, todo.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(DeleteIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }))))))), React.createElement(Divider, {\n    variant: \"inset\",\n    component: \"li\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  })));\n}\n\nTodoCard.propTypes = {\n  deleteTodoButtonHandler: PropTypes.func,\n  markTodoDoneButtonHandler: PropTypes.func,\n  editTodoButtonHandler: PropTypes.func,\n  todo: PropTypes.instanceOf(Object),\n  user: PropTypes.instanceOf(Object),\n  calendarStrings: PropTypes.instanceOf(Object),\n  date: PropTypes.string,\n  refresh: PropTypes.bool\n};\nTodoCard.defaultProps = {\n  deleteTodoButtonHandler: noop,\n  markTodoDoneButtonHandler: noop,\n  editTodoButtonHandler: noop,\n  calendarStrings: {},\n  todo: [],\n  user: {},\n  date: '',\n  refresh: false\n};\nexport default TodoCard;","map":{"version":3,"sources":["D:/REACT JS/React Upforce/daily-todo-fb-final/src/modules/Home/TodoList/TodoListItem/TodoListItem.js"],"names":["React","useEffect","PropTypes","Moment","makeStyles","red","List","ListItem","Divider","ListItemText","ListItemSecondaryAction","Typography","Tooltip","CheckCircleIcon","CheckCircleOutlineIcon","DeleteIcon","EditIcon","IconButton","moment","noop","formatedDate","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","padding","momentTag","fontSize","inline","display","listItemTextLineThrough","color","textDecoration","fontStyle","card","marginBottom","spacing","cardBackground","deleteButton","greenButton","chip","chipIcon","isHidden","TodoCard","deleteTodoButtonHandler","markTodoDoneButtonHandler","editTodoButtonHandler","todo","user","date","calendarStrings","refresh","classes","createdTime","createdAt","allowEditTill","add","listItem","isDone","event","email","isSameOrAfter","Date","isBefore","toDate","id","propTypes","func","instanceOf","Object","string","bool","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,uBAAP,MAAoC,2CAApC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,sBAAP,MAAmC,uCAAnC;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,IAAT,EAAeC,YAAf,QAAmC,mBAAnC;AAGA,MAAMC,SAAS,GAAGjB,UAAU,CAACkB,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,QAAQ,EAAE,MAFN;AAGJC,IAAAA,eAAe,EAAEJ,KAAK,CAACK,OAAN,CAAcC,UAAd,CAAyBC,KAHtC;AAIJC,IAAAA,OAAO,EAAE;AAJL,GAD+B;AAOrCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE;AADD,GAP0B;AAUrCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE,QADH;AAENF,IAAAA,QAAQ,EAAE;AAFJ,GAV6B;AAcrCG,EAAAA,uBAAuB,EAAE;AACvBC,IAAAA,KAAK,EAAE,SADgB;AAEvBC,IAAAA,cAAc,EAAE,cAFO;AAGvBC,IAAAA,SAAS,EAAE;AAHY,GAdY;AAmBrCC,EAAAA,IAAI,EAAE;AACJd,IAAAA,QAAQ,EAAE,GADN;AAEJe,IAAAA,YAAY,EAAElB,KAAK,CAACmB,OAAN,CAAc,CAAd;AAFV,GAnB+B;AAuBrCC,EAAAA,cAAc,EAAE;AACdjB,IAAAA,QAAQ,EAAE,GADI;AAEde,IAAAA,YAAY,EAAElB,KAAK,CAACmB,OAAN,CAAc,CAAd,CAFA;AAGdf,IAAAA,eAAe,EAAE;AAHH,GAvBqB;AA4BrCiB,EAAAA,YAAY,EAAE;AACZP,IAAAA,KAAK,EAAE/B,GAAG,CAAC,GAAD;AADE,GA5BuB;AA+BrCuC,EAAAA,WAAW,EAAE;AACXR,IAAAA,KAAK,EAAE;AADI,GA/BwB;AAkCrCS,EAAAA,IAAI,EAAE;AACJb,IAAAA,QAAQ,EAAE;AADN,GAlC+B;AAqCrCc,EAAAA,QAAQ,EAAE;AACRd,IAAAA,QAAQ,EAAE;AADF,GArC2B;AAwCrCe,EAAAA,QAAQ,EAAE;AACRb,IAAAA,OAAO,EAAE;AADD;AAxC2B,CAAL,CAAN,CAA5B;;AA6CA,SAASc,QAAT,CAAkB;AAChBC,EAAAA,uBADgB;AAEhBC,EAAAA,yBAFgB;AAGhBC,EAAAA,qBAHgB;AAIhBC,EAAAA,IAJgB;AAKhBC,EAAAA,IALgB;AAMhBC,EAAAA,IANgB;AAOhBC,EAAAA,eAPgB;AAQhBC,EAAAA;AARgB,CAAlB,EASG;AACD,QAAMC,OAAO,GAAGpC,SAAS,EAAzB;AACA,MAAIqC,WAAW,GAAGxC,MAAM,CAACkC,IAAI,CAACO,SAAN,CAAxB;AACA,MAAIC,aAAa,GAAG1C,MAAM,CAACkC,IAAI,CAACO,SAAN,CAAN,CAAuBE,GAAvB,CAA2B,CAA3B,EAA8B,OAA9B,CAApB;AACA5D,EAAAA,SAAS,CAAC,MAAM;AACdyD,IAAAA,WAAW,GAAGxC,MAAM,CAACkC,IAAI,CAACO,SAAN,CAApB;AACAC,IAAAA,aAAa,GAAG1C,MAAM,CAACkC,IAAI,CAACO,SAAN,CAAN,CAAuBE,GAAvB,CAA2B,CAA3B,EAA8B,OAA9B,CAAhB;AACD,GAHQ,EAGN,CAACL,OAAD,CAHM,CAAT;AAIA,SACE,0CACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEC,OAAO,CAAClC,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,UAAU,EAAC,YAArB;AAAkC,IAAA,SAAS,EAAEkC,OAAO,CAACK,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAEV,IAAI,CAACW,MAAL,GAAc,WAAd,GAA4B,cAA5C;AAA4D,IAAA,KAAK,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEC,KAAK,IAAId,yBAAyB,CAACc,KAAD,EAAQZ,IAAR,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIA,IAAI,CAACW,MAAL,GAEI,oBAAC,eAAD;AACE,IAAA,SAAS,EAAEX,IAAI,CAACW,MAAL,GAAcN,OAAO,CAACb,WAAtB,GAAoC,IADjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,GAMI,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARR,CADF,CADF,EAcE,oBAAC,YAAD;AACE,IAAA,SAAS,EAAEQ,IAAI,CAACW,MAAL,GAAcN,OAAO,CAACtB,uBAAtB,GAAgD,IAD7D;AAEE,IAAA,OAAO,EAAEiB,IAAI,CAACA,IAFhB;AAGE,IAAA,SAAS,EACP,0CACE,oBAAC,UAAD;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,OAAO,EAAC,OAFV;AAGE,MAAA,SAAS,EAAEK,OAAO,CAACxB,MAHrB;AAIE,MAAA,KAAK,EAAC,aAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGoB,IAAI,CAACY,KANR,CADF,oBAUE,oBAAC,MAAD;AACE,MAAA,SAAS,EAAER,OAAO,CAAC1B,SADrB;AAEE,MAAA,QAAQ,EAAEwB,eAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGH,IAAI,CAACO,SAJR,CAVF,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,EAqCE,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIzC,MAAM,CAACoC,IAAD,CAAN,CAAaY,aAAb,CAA2B9C,YAAY,CAAC,IAAI+C,IAAJ,EAAD,CAAvC,KAEE,0CAEKjD,MAAM,CAACwC,WAAD,CAAN,CAAoBU,QAApB,CAA6BR,aAA7B,KACKA,aAAa,GAAG1C,MAAM,CAAC,CAAC,IAAIiD,IAAJ,EAAF,CAAN,CAAoBE,MAApB,EADtB,IAGE,0CACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,MAAf;AAAsB,IAAA,KAAK,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAEL,KAAK,IAAIb,qBAAqB,CAACa,KAAD,EAAQZ,IAAR,CADzC;AAEE,IAAA,SAAS,EAAEA,IAAI,CAACW,MAAL,GAAcN,OAAO,CAACV,QAAtB,GAAiC,IAF9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CADF,EASE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,QAAf;AAAwB,IAAA,KAAK,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEiB,KAAK,IAAIf,uBAAuB,CAACe,KAAD,EAAQZ,IAAI,CAACkB,EAAb,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CATF,CALN,CAJN,CArCF,CADF,EAqEE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArEF,CADF,CADF;AA2ED;;AAEDtB,QAAQ,CAACuB,SAAT,GAAqB;AACnBtB,EAAAA,uBAAuB,EAAE/C,SAAS,CAACsE,IADhB;AAEnBtB,EAAAA,yBAAyB,EAAEhD,SAAS,CAACsE,IAFlB;AAGnBrB,EAAAA,qBAAqB,EAAEjD,SAAS,CAACsE,IAHd;AAInBpB,EAAAA,IAAI,EAAElD,SAAS,CAACuE,UAAV,CAAqBC,MAArB,CAJa;AAKnBrB,EAAAA,IAAI,EAAEnD,SAAS,CAACuE,UAAV,CAAqBC,MAArB,CALa;AAMnBnB,EAAAA,eAAe,EAAErD,SAAS,CAACuE,UAAV,CAAqBC,MAArB,CANE;AAOnBpB,EAAAA,IAAI,EAAEpD,SAAS,CAACyE,MAPG;AAQnBnB,EAAAA,OAAO,EAAEtD,SAAS,CAAC0E;AARA,CAArB;AAWA5B,QAAQ,CAAC6B,YAAT,GAAwB;AACtB5B,EAAAA,uBAAuB,EAAE9B,IADH;AAEtB+B,EAAAA,yBAAyB,EAAE/B,IAFL;AAGtBgC,EAAAA,qBAAqB,EAAEhC,IAHD;AAItBoC,EAAAA,eAAe,EAAE,EAJK;AAKtBH,EAAAA,IAAI,EAAE,EALgB;AAMtBC,EAAAA,IAAI,EAAE,EANgB;AAOtBC,EAAAA,IAAI,EAAE,EAPgB;AAQtBE,EAAAA,OAAO,EAAE;AARa,CAAxB;AAWA,eAAeR,QAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Moment from 'react-moment';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport moment from 'moment';\nimport { noop, formatedDate } from '../../../../utils';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: '100%',\n    backgroundColor: theme.palette.background.paper,\n    padding: 0,\n  },\n  momentTag: {\n    fontSize: '0.8rem',\n  },\n  inline: {\n    display: 'inline',\n    fontSize: '0.9rem',\n  },\n  listItemTextLineThrough: {\n    color: '#999898',\n    textDecoration: 'line-through',\n    fontStyle: 'italic',\n  },\n  card: {\n    maxWidth: 250,\n    marginBottom: theme.spacing(2),\n  },\n  cardBackground: {\n    maxWidth: 250,\n    marginBottom: theme.spacing(2),\n    backgroundColor: '#ffffff98',\n  },\n  deleteButton: {\n    color: red[500],\n  },\n  greenButton: {\n    color: 'green',\n  },\n  chip: {\n    fontSize: '0.7rem !important',\n  },\n  chipIcon: {\n    fontSize: '0.9rem !important',\n  },\n  isHidden: {\n    display: 'none',\n  },\n}));\n\nfunction TodoCard({\n  deleteTodoButtonHandler,\n  markTodoDoneButtonHandler,\n  editTodoButtonHandler,\n  todo,\n  user,\n  date,\n  calendarStrings,\n  refresh,\n}) {\n  const classes = useStyles();\n  let createdTime = moment(todo.createdAt);\n  let allowEditTill = moment(todo.createdAt).add(2, 'hours');\n  useEffect(() => {\n    createdTime = moment(todo.createdAt);\n    allowEditTill = moment(todo.createdAt).add(2, 'hours');\n  }, [refresh]);\n  return (\n    <>\n      <List className={classes.root}>\n        <ListItem alignItems=\"flex-start\" className={classes.listItem}>\n          <Tooltip title={todo.isDone ? 'Todo Done' : 'Mark as Done'} arrow>\n            <IconButton onClick={event => markTodoDoneButtonHandler(event, todo)}>\n              {\n                todo.isDone\n                  ? (\n                    <CheckCircleIcon\n                      className={todo.isDone ? classes.greenButton : null}\n                    />\n                  )\n                  : <CheckCircleOutlineIcon />\n              }\n            </IconButton>\n          </Tooltip>\n          <ListItemText\n            className={todo.isDone ? classes.listItemTextLineThrough : null}\n            primary={todo.todo}\n            secondary={(\n              <>\n                <Typography\n                  component=\"span\"\n                  variant=\"body2\"\n                  className={classes.inline}\n                  color=\"textPrimary\"\n                >\n                  {user.email}\n                </Typography>\n                &nbsp;&mdash;&nbsp;\n                <Moment\n                  className={classes.momentTag}\n                  calendar={calendarStrings}\n                >\n                  {todo.createdAt}\n                </Moment>\n              </>\n            )}\n          />\n          <ListItemSecondaryAction>\n            {\n              moment(date).isSameOrAfter(formatedDate(new Date()))\n              && (\n                <>\n                  {\n                    (moment(createdTime).isBefore(allowEditTill)\n                      && (allowEditTill > moment(+new Date()).toDate()))\n                    && (\n                      <>\n                        <Tooltip title=\"Edit\" arrow>\n                          <IconButton\n                            onClick={event => editTodoButtonHandler(event, todo)}\n                            className={todo.isDone ? classes.isHidden : null}\n                          >\n                            <EditIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Delete\" arrow>\n                          <IconButton onClick={event => deleteTodoButtonHandler(event, todo.id)}>\n                            <DeleteIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </>\n                    )\n                  }\n                </>\n              )\n            }\n          </ListItemSecondaryAction>\n        </ListItem>\n        <Divider variant=\"inset\" component=\"li\" />\n      </List>\n    </>\n  );\n}\n\nTodoCard.propTypes = {\n  deleteTodoButtonHandler: PropTypes.func,\n  markTodoDoneButtonHandler: PropTypes.func,\n  editTodoButtonHandler: PropTypes.func,\n  todo: PropTypes.instanceOf(Object),\n  user: PropTypes.instanceOf(Object),\n  calendarStrings: PropTypes.instanceOf(Object),\n  date: PropTypes.string,\n  refresh: PropTypes.bool,\n};\n\nTodoCard.defaultProps = {\n  deleteTodoButtonHandler: noop,\n  markTodoDoneButtonHandler: noop,\n  editTodoButtonHandler: noop,\n  calendarStrings: {},\n  todo: [],\n  user: {},\n  date: '',\n  refresh: false,\n};\n\nexport default TodoCard;\n"]},"metadata":{},"sourceType":"module"}