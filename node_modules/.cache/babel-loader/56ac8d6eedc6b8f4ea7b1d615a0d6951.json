{"ast":null,"code":"import _objectSpread from \"D:\\\\REACT JS\\\\React Upforce\\\\daily-todo-fb-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport moment from 'moment';\nimport firebase from '../firebase/firebase';\nconst db = firebase.firestore();\n\nconst get = async (email, date) => {\n  const getResponse = await db.collection('todosList').doc(email).collection(date).get().then(querySnapshot => {\n    const todoList = [];\n    querySnapshot.forEach(doc => {\n      todoList.push(_objectSpread({\n        id: doc.id\n      }, doc.data()));\n    });\n    return todoList;\n  }).catch(err => console.log('Error while fetching collection from database', err));\n  return getResponse;\n};\n\nconst add = async (email, date, data) => {\n  const currentDate = moment(date).format('DDMMYYYY');\n  const createdAt = +new Date();\n  const getResponse = await db.collection('todosList').doc(email).collection(currentDate).add(_objectSpread({}, data, {\n    isDone: false,\n    createdAt\n  })).then(docRef => _objectSpread({\n    id: docRef.id,\n    isDone: false,\n    createdAt\n  }, data)).catch(err => console.log('error', err));\n  return getResponse;\n};\n\nconst del = async (email, id, date) => {\n  const getResponse = await db.collection('todosList').doc(email).collection(date).doc(id).delete().then(() => ({\n    id\n  })).catch(err => console.log('error', err));\n  return getResponse;\n};\n\nconst done = async (todo, email, date) => {\n  const getResponse = await db.collection('todosList').doc(email).collection(date).doc(todo.id).update({\n    isDone: !todo.isDone\n  }).then(() => ({\n    id: todo.id,\n    createdAt: todo.createdAt\n  }));\n  return getResponse;\n};\n\nconst update = async (id, data, email, date) => {\n  const getResponse = await db.collection('todosList').doc(email).collection(date).doc(id).update({\n    todo: data.todo\n  }).then(() => ({\n    id,\n    data\n  }));\n  return getResponse;\n};\n\nconst updateTime = async (email, mTime, eTime) => {\n  const getResponse = await db.collection('todosList').doc(email).update({\n    mTime,\n    eTime\n  });\n  return getResponse;\n};\n\nconst fetchTime = async email => {\n  const getResponse = await db.collection('todosList').doc(email).get().then(doc => ({\n    data: doc.data()\n  }));\n  return getResponse;\n};\n\nconst setTime = async (email, mTime, eTime) => {\n  const getResponse = await db.collection('todosList').doc(email).set({\n    mTime,\n    eTime\n  });\n  return getResponse;\n};\n\nexport default {\n  get,\n  add,\n  del,\n  done,\n  update,\n  updateTime,\n  fetchTime,\n  setTime\n};","map":{"version":3,"sources":["D:/REACT JS/React Upforce/daily-todo-fb-final/src/utils/api.js"],"names":["moment","firebase","db","firestore","get","email","date","getResponse","collection","doc","then","querySnapshot","todoList","forEach","push","id","data","catch","err","console","log","add","currentDate","format","createdAt","Date","isDone","docRef","del","delete","done","todo","update","updateTime","mTime","eTime","fetchTime","setTime","set"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport firebase from '../firebase/firebase';\n\nconst db = firebase.firestore();\n\nconst get = async (email, date) => {\n  const getResponse = await db.collection('todosList').doc(email).collection(date)\n    .get()\n    .then(querySnapshot => {\n      const todoList = [];\n      querySnapshot.forEach(doc => {\n        todoList.push({\n          id: doc.id,\n          ...doc.data(),\n        });\n      });\n      return todoList;\n    })\n    .catch(err => console.log('Error while fetching collection from database', err));\n  return getResponse;\n};\n\nconst add = async (email, date, data) => {\n  const currentDate = moment(date).format('DDMMYYYY');\n  const createdAt = +new Date();\n  const getResponse = await db.collection('todosList').doc(email).collection(currentDate)\n    .add({\n      ...data,\n      isDone: false,\n      createdAt,\n    })\n    .then(docRef => ({\n      id: docRef.id,\n      isDone: false,\n      createdAt,\n      ...data,\n    }))\n    .catch(err => console.log('error', err));\n  return getResponse;\n};\n\nconst del = async (email, id, date) => {\n  const getResponse = await db.collection('todosList').doc(email).collection(date).doc(id)\n    .delete()\n    .then(() => ({\n      id,\n    }))\n    .catch(err => console.log('error', err));\n  return getResponse;\n};\n\nconst done = async (todo, email, date) => {\n  const getResponse = await db.collection('todosList').doc(email).collection(date).doc(todo.id)\n    .update({ isDone: !todo.isDone })\n    .then(() => ({\n      id: todo.id,\n      createdAt: todo.createdAt,\n    }));\n  return getResponse;\n};\n\nconst update = async (id, data, email, date) => {\n  const getResponse = await db.collection('todosList').doc(email).collection(date).doc(id)\n    .update({ todo: data.todo })\n    .then(() => ({\n      id,\n      data,\n    }));\n  return getResponse;\n};\n\nconst updateTime = async (email, mTime, eTime) => {\n  const getResponse = await db.collection('todosList').doc(email)\n    .update({ mTime, eTime });\n  return getResponse;\n};\n\nconst fetchTime = async email => {\n  const getResponse = await db.collection('todosList').doc(email)\n    .get()\n    .then(doc => ({\n      data: doc.data(),\n    }));\n  return getResponse;\n};\n\nconst setTime = async (email, mTime, eTime) => {\n  const getResponse = await db.collection('todosList').doc(email)\n    .set({ mTime, eTime });\n  return getResponse;\n};\n\nexport default {\n  get,\n  add,\n  del,\n  done,\n  update,\n  updateTime,\n  fetchTime,\n  setTime,\n};\n"]},"metadata":{},"sourceType":"module"}