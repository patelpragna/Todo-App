{"ast":null,"code":"import moment from 'moment';\nimport * as actionTypes from './actionTypes';\nimport api from '../utils/api';\nexport const fetchTodos = (user, date) => {\n  const currentDate = moment(date).format('DDMMYYYY');\n  return {\n    type: actionTypes.FETCH_TODOS,\n    payload: api.get(user.email, currentDate)\n  };\n};\nexport const addTodo = (data, date, user) => ({\n  type: actionTypes.ADD_TODO,\n  payload: api.add(user.email, date, data)\n});\nexport const deleteTodo = (user, id, date) => {\n  const currentDate = moment(date).format('DDMMYYYY');\n  return {\n    type: actionTypes.DELETE_TODO,\n    payload: api.del(user.email, id, currentDate)\n  };\n};\nexport const markDone = (todo, user, date) => {\n  const currentDate = moment(date).format('DDMMYYYY');\n  return {\n    type: actionTypes.MARK_TODO_DONE,\n    payload: api.done(todo, user.email, currentDate)\n  };\n};\nexport const editTodo = id => ({\n  type: actionTypes.EDIT_TODO,\n  payload: {\n    id\n  }\n});\nexport const cancelEdit = () => ({\n  type: actionTypes.CANCEL_EDIT\n});\nexport const updateTodo = (id, data, user, date) => {\n  const currentDate = moment(date).format('DDMMYYYY');\n  return {\n    type: actionTypes.UPDATE_TODO,\n    payload: api.update(id, data, user.email, currentDate)\n  };\n};\nexport const dateChange = date => ({\n  type: actionTypes.DATE_CHANGE,\n  payload: {\n    data: date\n  }\n});\nexport const copyToClipboard = () => ({\n  type: actionTypes.COPY_TO_CLIPBOARD\n});\nexport const toastClose = () => ({\n  type: actionTypes.TOAST_CLOSE\n});","map":{"version":3,"sources":["D:/REACT JS/React Upforce/daily-todo-fb-final/src/redux/todoActions.js"],"names":["moment","actionTypes","api","fetchTodos","user","date","currentDate","format","type","FETCH_TODOS","payload","get","email","addTodo","data","ADD_TODO","add","deleteTodo","id","DELETE_TODO","del","markDone","todo","MARK_TODO_DONE","done","editTodo","EDIT_TODO","cancelEdit","CANCEL_EDIT","updateTodo","UPDATE_TODO","update","dateChange","DATE_CHANGE","copyToClipboard","COPY_TO_CLIPBOARD","toastClose","TOAST_CLOSE"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACxC,QAAMC,WAAW,GAAGN,MAAM,CAACK,IAAD,CAAN,CAAaE,MAAb,CAAoB,UAApB,CAApB;AACA,SAAQ;AACNC,IAAAA,IAAI,EAAEP,WAAW,CAACQ,WADZ;AAENC,IAAAA,OAAO,EAAER,GAAG,CAACS,GAAJ,CAAQP,IAAI,CAACQ,KAAb,EAAoBN,WAApB;AAFH,GAAR;AAID,CANM;AAQP,OAAO,MAAMO,OAAO,GAAG,CAACC,IAAD,EAAOT,IAAP,EAAaD,IAAb,MAAuB;AAC5CI,EAAAA,IAAI,EAAEP,WAAW,CAACc,QAD0B;AAE5CL,EAAAA,OAAO,EAAER,GAAG,CAACc,GAAJ,CAAQZ,IAAI,CAACQ,KAAb,EAAoBP,IAApB,EAA0BS,IAA1B;AAFmC,CAAvB,CAAhB;AAKP,OAAO,MAAMG,UAAU,GAAG,CAACb,IAAD,EAAOc,EAAP,EAAWb,IAAX,KAAoB;AAC5C,QAAMC,WAAW,GAAGN,MAAM,CAACK,IAAD,CAAN,CAAaE,MAAb,CAAoB,UAApB,CAApB;AACA,SAAQ;AACNC,IAAAA,IAAI,EAAEP,WAAW,CAACkB,WADZ;AAENT,IAAAA,OAAO,EAAER,GAAG,CAACkB,GAAJ,CAAQhB,IAAI,CAACQ,KAAb,EAAoBM,EAApB,EAAwBZ,WAAxB;AAFH,GAAR;AAID,CANM;AAQP,OAAO,MAAMe,QAAQ,GAAG,CAACC,IAAD,EAAOlB,IAAP,EAAaC,IAAb,KAAsB;AAC5C,QAAMC,WAAW,GAAGN,MAAM,CAACK,IAAD,CAAN,CAAaE,MAAb,CAAoB,UAApB,CAApB;AACA,SAAQ;AACNC,IAAAA,IAAI,EAAEP,WAAW,CAACsB,cADZ;AAENb,IAAAA,OAAO,EAAER,GAAG,CAACsB,IAAJ,CAASF,IAAT,EAAelB,IAAI,CAACQ,KAApB,EAA2BN,WAA3B;AAFH,GAAR;AAID,CANM;AAQP,OAAO,MAAMmB,QAAQ,GAAGP,EAAE,KAAK;AAC7BV,EAAAA,IAAI,EAAEP,WAAW,CAACyB,SADW;AAE7BhB,EAAAA,OAAO,EAAE;AACPQ,IAAAA;AADO;AAFoB,CAAL,CAAnB;AAOP,OAAO,MAAMS,UAAU,GAAG,OAAO;AAC/BnB,EAAAA,IAAI,EAAEP,WAAW,CAAC2B;AADa,CAAP,CAAnB;AAIP,OAAO,MAAMC,UAAU,GAAG,CAACX,EAAD,EAAKJ,IAAL,EAAWV,IAAX,EAAiBC,IAAjB,KAA0B;AAClD,QAAMC,WAAW,GAAGN,MAAM,CAACK,IAAD,CAAN,CAAaE,MAAb,CAAoB,UAApB,CAApB;AACA,SAAQ;AACNC,IAAAA,IAAI,EAAEP,WAAW,CAAC6B,WADZ;AAENpB,IAAAA,OAAO,EAAER,GAAG,CAAC6B,MAAJ,CAAWb,EAAX,EAAeJ,IAAf,EAAqBV,IAAI,CAACQ,KAA1B,EAAiCN,WAAjC;AAFH,GAAR;AAID,CANM;AAQP,OAAO,MAAM0B,UAAU,GAAG3B,IAAI,KAAK;AACjCG,EAAAA,IAAI,EAAEP,WAAW,CAACgC,WADe;AAEjCvB,EAAAA,OAAO,EAAE;AACPI,IAAAA,IAAI,EAAET;AADC;AAFwB,CAAL,CAAvB;AAOP,OAAO,MAAM6B,eAAe,GAAG,OAAO;AACpC1B,EAAAA,IAAI,EAAEP,WAAW,CAACkC;AADkB,CAAP,CAAxB;AAIP,OAAO,MAAMC,UAAU,GAAG,OAAO;AAC/B5B,EAAAA,IAAI,EAAEP,WAAW,CAACoC;AADa,CAAP,CAAnB","sourcesContent":["import moment from 'moment';\n\nimport * as actionTypes from './actionTypes';\nimport api from '../utils/api';\n\nexport const fetchTodos = (user, date) => {\n  const currentDate = moment(date).format('DDMMYYYY');\n  return ({\n    type: actionTypes.FETCH_TODOS,\n    payload: api.get(user.email, currentDate),\n  });\n};\n\nexport const addTodo = (data, date, user) => ({\n  type: actionTypes.ADD_TODO,\n  payload: api.add(user.email, date, data),\n});\n\nexport const deleteTodo = (user, id, date) => {\n  const currentDate = moment(date).format('DDMMYYYY');\n  return ({\n    type: actionTypes.DELETE_TODO,\n    payload: api.del(user.email, id, currentDate),\n  });\n};\n\nexport const markDone = (todo, user, date) => {\n  const currentDate = moment(date).format('DDMMYYYY');\n  return ({\n    type: actionTypes.MARK_TODO_DONE,\n    payload: api.done(todo, user.email, currentDate),\n  });\n};\n\nexport const editTodo = id => ({\n  type: actionTypes.EDIT_TODO,\n  payload: {\n    id,\n  },\n});\n\nexport const cancelEdit = () => ({\n  type: actionTypes.CANCEL_EDIT,\n});\n\nexport const updateTodo = (id, data, user, date) => {\n  const currentDate = moment(date).format('DDMMYYYY');\n  return ({\n    type: actionTypes.UPDATE_TODO,\n    payload: api.update(id, data, user.email, currentDate),\n  });\n};\n\nexport const dateChange = date => ({\n  type: actionTypes.DATE_CHANGE,\n  payload: {\n    data: date,\n  },\n});\n\nexport const copyToClipboard = () => ({\n  type: actionTypes.COPY_TO_CLIPBOARD,\n});\n\nexport const toastClose = () => ({\n  type: actionTypes.TOAST_CLOSE,\n});\n"]},"metadata":{},"sourceType":"module"}