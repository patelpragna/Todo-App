{"ast":null,"code":"var _jsxFileName = \"D:\\\\REACT JS\\\\React Upforce\\\\daily-todo-fb-final\\\\src\\\\modules\\\\Home\\\\AddTodo\\\\AddTodo.js\";\nimport React from 'react';\nimport { Form, Formik, Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport AddIcon from '@material-ui/icons/Add';\nimport Fab from '@material-ui/core/Fab';\nimport SaveIcon from '@material-ui/icons/Save';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport moment from 'moment';\nimport { noop, formatedDate } from '../../../utils';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '2px 4px',\n    width: 'auto'\n  },\n  inputForm2: {\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  iconButton: {\n    padding: 10\n  },\n  divider: {\n    height: 28,\n    margin: 4\n  },\n  headerContainer: {\n    position: 'fixed',\n    bottom: '0',\n    width: '83.5vh'\n  },\n  form: {\n    display: 'grid',\n    gridTemplateColumns: '86% 14%',\n    alignItems: 'center',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2)\n  },\n  formCancelEdit: {\n    display: 'grid',\n    gridTemplateColumns: '78% 22%',\n    alignItems: 'center',\n    marginBottom: theme.spacing(1)\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-end'\n  },\n  cancel: {\n    margin: theme.spacing(1)\n  },\n  update: {\n    margin: theme.spacing(1)\n  },\n  editButtons: {\n    display: 'flex'\n  },\n  formDivider: {\n    margin: 10\n  }\n}));\n\nfunction AddTodo({\n  addTodoButtonHandler,\n  updateTodoButtonHandler,\n  cancelEditButtonHandler,\n  validationSchema,\n  initialValues,\n  isEdit,\n  date\n}) {\n  const currentDate = formatedDate(new Date());\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    className: classes.headerContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Formik, {\n    enableReinitialize: true,\n    validateOnChange: true,\n    validateOnBlur: false,\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: (data, {\n      resetForm\n    }) => {\n      if (isEdit) {\n        updateTodoButtonHandler(data);\n      } else {\n        addTodoButtonHandler(data);\n      }\n\n      resetForm();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, ({\n    errors,\n    touched\n  }) => React.createElement(React.Fragment, null, moment(date).isBefore(currentDate) ? React.createElement(React.Fragment, null) : React.createElement(React.Fragment, null, React.createElement(Form, {\n    className: isEdit ? classes.formCancelEdit : classes.form,\n    noValidate: true,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"todo\",\n    type: \"input\",\n    id: \"todo\",\n    fullWidth: true,\n    variant: \"outlined\",\n    label: isEdit ? 'Update Todo' : 'Add New Todo',\n    error: touched.todo && Boolean(errors.todo),\n    helperText: errors.todo ? errors.todo : '',\n    as: TextField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: classes.buttons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, isEdit ? React.createElement(\"div\", {\n    className: classes.editButtons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.update,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Fab, {\n    type: \"submit\",\n    size: \"small\",\n    color: \"secondary\",\n    \"aria-label\": \"add\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(SaveIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: classes.cancel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(Fab, {\n    type: \"submit\",\n    onClick: cancelEditButtonHandler,\n    size: \"small\",\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(ClearIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })))) : React.createElement(Fab, {\n    type: \"submit\",\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(AddIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }))))))));\n}\n\nAddTodo.propTypes = {\n  addTodoButtonHandler: PropTypes.func,\n  updateTodoButtonHandler: PropTypes.func,\n  cancelEditButtonHandler: PropTypes.func,\n  validationSchema: PropTypes.instanceOf(Object),\n  initialValues: PropTypes.instanceOf(Object),\n  isEdit: PropTypes.bool,\n  date: PropTypes.string\n};\nAddTodo.defaultProps = {\n  addTodoButtonHandler: noop,\n  updateTodoButtonHandler: noop,\n  cancelEditButtonHandler: noop,\n  validationSchema: {},\n  initialValues: {},\n  isEdit: false,\n  date: ''\n};\nexport default AddTodo;","map":{"version":3,"sources":["D:/REACT JS/React Upforce/daily-todo-fb-final/src/modules/Home/AddTodo/AddTodo.js"],"names":["React","Form","Formik","Field","PropTypes","makeStyles","TextField","AddIcon","Fab","SaveIcon","ClearIcon","moment","noop","formatedDate","useStyles","theme","root","padding","width","inputForm2","marginLeft","spacing","flex","iconButton","divider","height","margin","headerContainer","position","bottom","form","display","gridTemplateColumns","alignItems","marginTop","marginBottom","formCancelEdit","buttons","justifyContent","cancel","update","editButtons","formDivider","AddTodo","addTodoButtonHandler","updateTodoButtonHandler","cancelEditButtonHandler","validationSchema","initialValues","isEdit","date","currentDate","Date","classes","data","resetForm","errors","touched","isBefore","todo","Boolean","propTypes","func","instanceOf","Object","bool","string","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Formik, Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport AddIcon from '@material-ui/icons/Add';\nimport Fab from '@material-ui/core/Fab';\nimport SaveIcon from '@material-ui/icons/Save';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nimport moment from 'moment';\nimport { noop, formatedDate } from '../../../utils';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '2px 4px',\n    width: 'auto',\n  },\n  inputForm2: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n  headerContainer: {\n    position: 'fixed',\n    bottom: '0',\n    width: '83.5vh',\n\n  },\n  form: {\n    display: 'grid',\n    gridTemplateColumns: '86% 14%',\n    alignItems: 'center',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  formCancelEdit: {\n    display: 'grid',\n    gridTemplateColumns: '78% 22%',\n    alignItems: 'center',\n    marginBottom: theme.spacing(1),\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-end',\n  },\n  cancel: {\n    margin: theme.spacing(1),\n  },\n  update: {\n    margin: theme.spacing(1),\n  },\n  editButtons: {\n    display: 'flex',\n  },\n  formDivider: {\n    margin: 10,\n  },\n}));\n\nfunction AddTodo({\n  addTodoButtonHandler,\n  updateTodoButtonHandler,\n  cancelEditButtonHandler,\n  validationSchema,\n  initialValues,\n  isEdit,\n  date,\n}) {\n  const currentDate = formatedDate(new Date());\n  const classes = useStyles();\n  return (\n    <div className={classes.headerContainer}>\n      <Formik\n        enableReinitialize\n        validateOnChange\n        validateOnBlur={false}\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(data, { resetForm }) => {\n          if (isEdit) {\n            updateTodoButtonHandler(data);\n          } else {\n            addTodoButtonHandler(data);\n          }\n          resetForm();\n        }}\n      >\n        {\n          ({ errors, touched }) => (\n            <>\n              {\n                moment(date).isBefore(currentDate)\n                  ? <></>\n                  : (\n                    <>\n                      <Form className={isEdit ? classes.formCancelEdit : classes.form} noValidate autoComplete=\"off\">\n                        <div>\n                          <Field\n                            name=\"todo\"\n                            type=\"input\"\n                            id=\"todo\"\n                            fullWidth\n                            variant=\"outlined\"\n                            label={isEdit ? 'Update Todo' : 'Add New Todo'}\n                            error={touched.todo && Boolean(errors.todo)}\n                            helperText={errors.todo ? errors.todo : ''}\n                            as={TextField}\n                          />\n                        </div>\n                        <div className={classes.buttons}>\n                          {\n                            isEdit\n                              ? (\n                                <div className={classes.editButtons}>\n                                  <div className={classes.update}>\n                                    <Fab\n                                      type=\"submit\"\n                                      size=\"small\"\n                                      color=\"secondary\"\n                                      aria-label=\"add\"\n                                    >\n                                      <SaveIcon />\n                                    </Fab>\n                                  </div>\n                                  <div className={classes.cancel}>\n                                    <Fab\n                                      type=\"submit\"\n                                      onClick={cancelEditButtonHandler}\n                                      size=\"small\"\n                                      color=\"primary\"\n                                      aria-label=\"add\"\n                                    >\n                                      <ClearIcon />\n                                    </Fab>\n                                  </div>\n                                </div>\n                              )\n                              : (\n                                <Fab\n                                  type=\"submit\"\n                                  color=\"primary\"\n                                  aria-label=\"add\"\n                                >\n                                  <AddIcon />\n                                </Fab>\n                              )\n                          }\n                        </div>\n                      </Form>\n                    </>\n                  )\n              }\n            </>\n          )\n        }\n      </Formik>\n    </div>\n  );\n}\n\nAddTodo.propTypes = {\n  addTodoButtonHandler: PropTypes.func,\n  updateTodoButtonHandler: PropTypes.func,\n  cancelEditButtonHandler: PropTypes.func,\n  validationSchema: PropTypes.instanceOf(Object),\n  initialValues: PropTypes.instanceOf(Object),\n  isEdit: PropTypes.bool,\n  date: PropTypes.string,\n};\n\nAddTodo.defaultProps = {\n  addTodoButtonHandler: noop,\n  updateTodoButtonHandler: noop,\n  cancelEditButtonHandler: noop,\n  validationSchema: {},\n  initialValues: {},\n  isEdit: false,\n  date: '',\n};\n\nexport default AddTodo;\n"]},"metadata":{},"sourceType":"module"}