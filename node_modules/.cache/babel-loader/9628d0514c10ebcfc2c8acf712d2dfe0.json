{"ast":null,"code":"import _slicedToArray from \"D:\\\\REACT JS\\\\React Upforce\\\\daily-todo-fb-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\REACT JS\\\\React Upforce\\\\daily-todo-fb-final\\\\src\\\\shared\\\\DrawerContent\\\\DrawerContentContainer.js\";\n\n/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport DrawerContent from './DrawerContent';\nimport SettingsDialog from '../Dialog/SettingsDialog';\nimport { logout } from '../../redux/authActions';\nimport { dateChange, fetchTodos } from '../../redux/todoActions';\nimport { addPreviousDayTodos } from '../../redux/previousdayActions';\nimport { morningTimeChange, eveningTimeChange, updateNotificationTime } from '../../redux/notificationActions';\nimport { noop, formatedDate } from '../../utils';\n\nconst DrawerContentContainer = ({\n  user,\n  date,\n  changedMorningTime,\n  changedEveningTime,\n  dateChange,\n  morningTimeChange,\n  eveningTimeChange,\n  logout,\n  fetchTodos,\n  previousDayTodos,\n  addPreviousDayTodos,\n  updateNotificationTime,\n  addPendingPreviousDayTodos\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        openSettingsDialog = _useState2[0],\n        setOpenSettingsDialog = _useState2[1];\n\n  const settingsButtonHandler = () => {\n    setOpenSettingsDialog(true);\n  };\n\n  const handleSettingsDialogClose = () => {\n    setOpenSettingsDialog(false);\n  };\n\n  const handleMorningTimeChange = date => {\n    morningTimeChange(date);\n  };\n\n  const handleEveningTimeChange = date => {\n    eveningTimeChange(date);\n  };\n\n  const saveButtonHandler = () => {\n    setOpenSettingsDialog(false);\n    updateNotificationTime(user, changedMorningTime, changedEveningTime);\n  };\n\n  const logoutButtonHandler = () => {\n    logout();\n  };\n\n  const handleDateChange = date => {\n    const newDate = formatedDate(date);\n    dateChange(newDate);\n\n    if (previousDayTodos !== 0 && newDate === formatedDate(new Date()) && addPendingPreviousDayTodos) {\n      fetchTodos(user, date).then(() => {\n        addPreviousDayTodos();\n      });\n    } else {\n      fetchTodos(user, date);\n    }\n  };\n\n  const goToTodayDateHandler = () => {\n    handleDateChange(new Date());\n  };\n\n  const prevButtonHandler = () => {\n    handleDateChange(moment(date).subtract(1, 'days').format());\n  };\n\n  const nextButtonHandler = () => {\n    handleDateChange(moment(date).add(1, 'days').format());\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(SettingsDialog, {\n    changedMorningTime: changedMorningTime,\n    changedEveningTime: changedEveningTime,\n    open: openSettingsDialog,\n    handleClose: handleSettingsDialogClose,\n    saveButtonHandler: saveButtonHandler,\n    handleMorningTimeChange: handleMorningTimeChange,\n    handleEveningTimeChange: handleEveningTimeChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(DrawerContent, {\n    date: date,\n    settingsButtonHandler: settingsButtonHandler,\n    logoutButtonHandler: logoutButtonHandler,\n    handleDateChange: handleDateChange,\n    goToTodayDateHandler: goToTodayDateHandler,\n    prevButtonHandler: prevButtonHandler,\n    nextButtonHandler: nextButtonHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }));\n};\n\nDrawerContentContainer.propTypes = {\n  logout: PropTypes.func,\n  morningTimeChange: PropTypes.func,\n  eveningTimeChange: PropTypes.func,\n  dateChange: PropTypes.func,\n  fetchTodos: PropTypes.func,\n  addPreviousDayTodos: PropTypes.func,\n  updateNotificationTime: PropTypes.func,\n  user: PropTypes.instanceOf(Object),\n  previousDayTodos: PropTypes.instanceOf(Array),\n  date: PropTypes.string,\n  changedMorningTime: PropTypes.string,\n  changedEveningTime: PropTypes.string,\n  addPendingPreviousDayTodos: PropTypes.bool\n};\nDrawerContentContainer.defaultProps = {\n  logout: noop,\n  morningTimeChange: noop,\n  eveningTimeChange: noop,\n  dateChange: noop,\n  fetchTodos: noop,\n  addPreviousDayTodos: noop,\n  updateNotificationTime: noop,\n  user: {},\n  previousDayTodos: [],\n  date: '',\n  changedMorningTime: '',\n  changedEveningTime: '',\n  addPendingPreviousDayTodos: false\n};\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  date: state.todo.date,\n  changedMorningTime: state.notification.changedMorningTime,\n  changedEveningTime: state.notification.changedEveningTime,\n  todos: state.todo.todos,\n  previousDayTodos: state.todo.previousDayTodos,\n  previousDay: state.todo.previousDay,\n  addPendingPreviousDayTodos: state.todo.addPendingPreviousDayTodos\n});\n\nconst mapDispatchToProps = dispatch => ({\n  morningTimeChange: date => dispatch(morningTimeChange(date)),\n  eveningTimeChange: date => dispatch(eveningTimeChange(date)),\n  logout: () => dispatch(logout()),\n  dateChange: date => dispatch(dateChange(date)),\n  fetchTodos: (user, date) => dispatch(fetchTodos(user, date)),\n  addPreviousDayTodos: () => dispatch(addPreviousDayTodos()),\n  updateNotificationTime: (user, mTime, eTime) => dispatch(updateNotificationTime(user, mTime, eTime))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DrawerContentContainer);","map":{"version":3,"sources":["D:/REACT JS/React Upforce/daily-todo-fb-final/src/shared/DrawerContent/DrawerContentContainer.js"],"names":["React","useState","connect","PropTypes","moment","DrawerContent","SettingsDialog","logout","dateChange","fetchTodos","addPreviousDayTodos","morningTimeChange","eveningTimeChange","updateNotificationTime","noop","formatedDate","DrawerContentContainer","user","date","changedMorningTime","changedEveningTime","previousDayTodos","addPendingPreviousDayTodos","openSettingsDialog","setOpenSettingsDialog","settingsButtonHandler","handleSettingsDialogClose","handleMorningTimeChange","handleEveningTimeChange","saveButtonHandler","logoutButtonHandler","handleDateChange","newDate","Date","then","goToTodayDateHandler","prevButtonHandler","subtract","format","nextButtonHandler","add","propTypes","func","instanceOf","Object","Array","string","bool","defaultProps","mapStateToProps","state","auth","todo","notification","todos","previousDay","mapDispatchToProps","dispatch","mTime","eTime"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAEA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,yBAAvC;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,sBAA/C,QAA6E,iCAA7E;AACA,SAASC,IAAT,EAAeC,YAAf,QAAmC,aAAnC;;AAEA,MAAMC,sBAAsB,GAAG,CAAC;AAC9BC,EAAAA,IAD8B;AAE9BC,EAAAA,IAF8B;AAG9BC,EAAAA,kBAH8B;AAI9BC,EAAAA,kBAJ8B;AAK9BZ,EAAAA,UAL8B;AAM9BG,EAAAA,iBAN8B;AAO9BC,EAAAA,iBAP8B;AAQ9BL,EAAAA,MAR8B;AAS9BE,EAAAA,UAT8B;AAU9BY,EAAAA,gBAV8B;AAW9BX,EAAAA,mBAX8B;AAY9BG,EAAAA,sBAZ8B;AAa9BS,EAAAA;AAb8B,CAAD,KAczB;AAAA,oBACgDrB,QAAQ,CAAC,KAAD,CADxD;AAAA;AAAA,QACGsB,kBADH;AAAA,QACuBC,qBADvB;;AAEJ,QAAMC,qBAAqB,GAAG,MAAM;AAClCD,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,GAFD;;AAIA,QAAME,yBAAyB,GAAG,MAAM;AACtCF,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,GAFD;;AAIA,QAAMG,uBAAuB,GAAGT,IAAI,IAAI;AACtCP,IAAAA,iBAAiB,CAACO,IAAD,CAAjB;AACD,GAFD;;AAIA,QAAMU,uBAAuB,GAAGV,IAAI,IAAI;AACtCN,IAAAA,iBAAiB,CAACM,IAAD,CAAjB;AACD,GAFD;;AAIA,QAAMW,iBAAiB,GAAG,MAAM;AAC9BL,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAX,IAAAA,sBAAsB,CAACI,IAAD,EAAOE,kBAAP,EAA2BC,kBAA3B,CAAtB;AACD,GAHD;;AAKA,QAAMU,mBAAmB,GAAG,MAAM;AAChCvB,IAAAA,MAAM;AACP,GAFD;;AAIA,QAAMwB,gBAAgB,GAAGb,IAAI,IAAI;AAC/B,UAAMc,OAAO,GAAGjB,YAAY,CAACG,IAAD,CAA5B;AACAV,IAAAA,UAAU,CAACwB,OAAD,CAAV;;AACA,QAAIX,gBAAgB,KAAK,CAArB,IACEW,OAAO,KAAKjB,YAAY,CAAC,IAAIkB,IAAJ,EAAD,CAD1B,IAECX,0BAFL,EAEiC;AAC/Bb,MAAAA,UAAU,CAACQ,IAAD,EAAOC,IAAP,CAAV,CAAuBgB,IAAvB,CAA4B,MAAM;AAChCxB,QAAAA,mBAAmB;AACpB,OAFD;AAGD,KAND,MAMO;AACLD,MAAAA,UAAU,CAACQ,IAAD,EAAOC,IAAP,CAAV;AACD;AACF,GAZD;;AAcA,QAAMiB,oBAAoB,GAAG,MAAM;AACjCJ,IAAAA,gBAAgB,CAAC,IAAIE,IAAJ,EAAD,CAAhB;AACD,GAFD;;AAIA,QAAMG,iBAAiB,GAAG,MAAM;AAC9BL,IAAAA,gBAAgB,CAAC3B,MAAM,CAACc,IAAD,CAAN,CAAamB,QAAb,CAAsB,CAAtB,EAAyB,MAAzB,EAAiCC,MAAjC,EAAD,CAAhB;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAG,MAAM;AAC9BR,IAAAA,gBAAgB,CAAC3B,MAAM,CAACc,IAAD,CAAN,CAAasB,GAAb,CAAiB,CAAjB,EAAoB,MAApB,EAA4BF,MAA5B,EAAD,CAAhB;AACD,GAFD;;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AACE,IAAA,kBAAkB,EAAEnB,kBADtB;AAEE,IAAA,kBAAkB,EAAEC,kBAFtB;AAGE,IAAA,IAAI,EAAEG,kBAHR;AAIE,IAAA,WAAW,EAAEG,yBAJf;AAKE,IAAA,iBAAiB,EAAEG,iBALrB;AAME,IAAA,uBAAuB,EAAEF,uBAN3B;AAOE,IAAA,uBAAuB,EAAEC,uBAP3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAUE,oBAAC,aAAD;AACE,IAAA,IAAI,EAAEV,IADR;AAEE,IAAA,qBAAqB,EAAEO,qBAFzB;AAGE,IAAA,mBAAmB,EAAEK,mBAHvB;AAIE,IAAA,gBAAgB,EAAEC,gBAJpB;AAKE,IAAA,oBAAoB,EAAEI,oBALxB;AAME,IAAA,iBAAiB,EAAEC,iBANrB;AAOE,IAAA,iBAAiB,EAAEG,iBAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AAsBD,CAzFD;;AA2FAvB,sBAAsB,CAACyB,SAAvB,GAAmC;AACjClC,EAAAA,MAAM,EAAEJ,SAAS,CAACuC,IADe;AAEjC/B,EAAAA,iBAAiB,EAAER,SAAS,CAACuC,IAFI;AAGjC9B,EAAAA,iBAAiB,EAAET,SAAS,CAACuC,IAHI;AAIjClC,EAAAA,UAAU,EAAEL,SAAS,CAACuC,IAJW;AAKjCjC,EAAAA,UAAU,EAAEN,SAAS,CAACuC,IALW;AAMjChC,EAAAA,mBAAmB,EAAEP,SAAS,CAACuC,IANE;AAOjC7B,EAAAA,sBAAsB,EAAEV,SAAS,CAACuC,IAPD;AAQjCzB,EAAAA,IAAI,EAAEd,SAAS,CAACwC,UAAV,CAAqBC,MAArB,CAR2B;AASjCvB,EAAAA,gBAAgB,EAAElB,SAAS,CAACwC,UAAV,CAAqBE,KAArB,CATe;AAUjC3B,EAAAA,IAAI,EAAEf,SAAS,CAAC2C,MAViB;AAWjC3B,EAAAA,kBAAkB,EAAEhB,SAAS,CAAC2C,MAXG;AAYjC1B,EAAAA,kBAAkB,EAAEjB,SAAS,CAAC2C,MAZG;AAajCxB,EAAAA,0BAA0B,EAAEnB,SAAS,CAAC4C;AAbL,CAAnC;AAgBA/B,sBAAsB,CAACgC,YAAvB,GAAsC;AACpCzC,EAAAA,MAAM,EAAEO,IAD4B;AAEpCH,EAAAA,iBAAiB,EAAEG,IAFiB;AAGpCF,EAAAA,iBAAiB,EAAEE,IAHiB;AAIpCN,EAAAA,UAAU,EAAEM,IAJwB;AAKpCL,EAAAA,UAAU,EAAEK,IALwB;AAMpCJ,EAAAA,mBAAmB,EAAEI,IANe;AAOpCD,EAAAA,sBAAsB,EAAEC,IAPY;AAQpCG,EAAAA,IAAI,EAAE,EAR8B;AASpCI,EAAAA,gBAAgB,EAAE,EATkB;AAUpCH,EAAAA,IAAI,EAAE,EAV8B;AAWpCC,EAAAA,kBAAkB,EAAE,EAXgB;AAYpCC,EAAAA,kBAAkB,EAAE,EAZgB;AAapCE,EAAAA,0BAA0B,EAAE;AAbQ,CAAtC;;AAgBA,MAAM2B,eAAe,GAAGC,KAAK,KAAK;AAChCjC,EAAAA,IAAI,EAAEiC,KAAK,CAACC,IAAN,CAAWlC,IADe;AAEhCC,EAAAA,IAAI,EAAEgC,KAAK,CAACE,IAAN,CAAWlC,IAFe;AAGhCC,EAAAA,kBAAkB,EAAE+B,KAAK,CAACG,YAAN,CAAmBlC,kBAHP;AAIhCC,EAAAA,kBAAkB,EAAE8B,KAAK,CAACG,YAAN,CAAmBjC,kBAJP;AAKhCkC,EAAAA,KAAK,EAAEJ,KAAK,CAACE,IAAN,CAAWE,KALc;AAMhCjC,EAAAA,gBAAgB,EAAE6B,KAAK,CAACE,IAAN,CAAW/B,gBANG;AAOhCkC,EAAAA,WAAW,EAAEL,KAAK,CAACE,IAAN,CAAWG,WAPQ;AAQhCjC,EAAAA,0BAA0B,EAAE4B,KAAK,CAACE,IAAN,CAAW9B;AARP,CAAL,CAA7B;;AAWA,MAAMkC,kBAAkB,GAAGC,QAAQ,KAAK;AACtC9C,EAAAA,iBAAiB,EAAEO,IAAI,IAAIuC,QAAQ,CAAC9C,iBAAiB,CAACO,IAAD,CAAlB,CADG;AAEtCN,EAAAA,iBAAiB,EAAEM,IAAI,IAAIuC,QAAQ,CAAC7C,iBAAiB,CAACM,IAAD,CAAlB,CAFG;AAGtCX,EAAAA,MAAM,EAAE,MAAMkD,QAAQ,CAAClD,MAAM,EAAP,CAHgB;AAItCC,EAAAA,UAAU,EAAEU,IAAI,IAAIuC,QAAQ,CAACjD,UAAU,CAACU,IAAD,CAAX,CAJU;AAKtCT,EAAAA,UAAU,EAAE,CAACQ,IAAD,EAAOC,IAAP,KAAgBuC,QAAQ,CAAChD,UAAU,CAACQ,IAAD,EAAOC,IAAP,CAAX,CALE;AAMtCR,EAAAA,mBAAmB,EAAE,MAAM+C,QAAQ,CAAC/C,mBAAmB,EAApB,CANG;AAOtCG,EAAAA,sBAAsB,EAAE,CAACI,IAAD,EAAOyC,KAAP,EAAcC,KAAd,KACtBF,QAAQ,CAAC5C,sBAAsB,CAACI,IAAD,EAAOyC,KAAP,EAAcC,KAAd,CAAvB;AAR4B,CAAL,CAAnC;;AAYA,eAAezD,OAAO,CAAC+C,eAAD,EAAkBO,kBAAlB,CAAP,CAA6CxC,sBAA7C,CAAf","sourcesContent":["/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nimport DrawerContent from './DrawerContent';\nimport SettingsDialog from '../Dialog/SettingsDialog';\n\nimport { logout } from '../../redux/authActions';\nimport { dateChange, fetchTodos } from '../../redux/todoActions';\nimport { addPreviousDayTodos } from '../../redux/previousdayActions';\nimport { morningTimeChange, eveningTimeChange, updateNotificationTime } from '../../redux/notificationActions';\nimport { noop, formatedDate } from '../../utils';\n\nconst DrawerContentContainer = ({\n  user,\n  date,\n  changedMorningTime,\n  changedEveningTime,\n  dateChange,\n  morningTimeChange,\n  eveningTimeChange,\n  logout,\n  fetchTodos,\n  previousDayTodos,\n  addPreviousDayTodos,\n  updateNotificationTime,\n  addPendingPreviousDayTodos,\n}) => {\n  const [openSettingsDialog, setOpenSettingsDialog] = useState(false);\n  const settingsButtonHandler = () => {\n    setOpenSettingsDialog(true);\n  };\n\n  const handleSettingsDialogClose = () => {\n    setOpenSettingsDialog(false);\n  };\n\n  const handleMorningTimeChange = date => {\n    morningTimeChange(date);\n  };\n\n  const handleEveningTimeChange = date => {\n    eveningTimeChange(date);\n  };\n\n  const saveButtonHandler = () => {\n    setOpenSettingsDialog(false);\n    updateNotificationTime(user, changedMorningTime, changedEveningTime);\n  };\n\n  const logoutButtonHandler = () => {\n    logout();\n  };\n\n  const handleDateChange = date => {\n    const newDate = formatedDate(date);\n    dateChange(newDate);\n    if (previousDayTodos !== 0\n      && (newDate === formatedDate(new Date()))\n      && addPendingPreviousDayTodos) {\n      fetchTodos(user, date).then(() => {\n        addPreviousDayTodos();\n      });\n    } else {\n      fetchTodos(user, date);\n    }\n  };\n\n  const goToTodayDateHandler = () => {\n    handleDateChange(new Date());\n  };\n\n  const prevButtonHandler = () => {\n    handleDateChange(moment(date).subtract(1, 'days').format());\n  };\n\n  const nextButtonHandler = () => {\n    handleDateChange(moment(date).add(1, 'days').format());\n  };\n\n  return (\n    <div>\n      <SettingsDialog\n        changedMorningTime={changedMorningTime}\n        changedEveningTime={changedEveningTime}\n        open={openSettingsDialog}\n        handleClose={handleSettingsDialogClose}\n        saveButtonHandler={saveButtonHandler}\n        handleMorningTimeChange={handleMorningTimeChange}\n        handleEveningTimeChange={handleEveningTimeChange}\n      />\n      <DrawerContent\n        date={date}\n        settingsButtonHandler={settingsButtonHandler}\n        logoutButtonHandler={logoutButtonHandler}\n        handleDateChange={handleDateChange}\n        goToTodayDateHandler={goToTodayDateHandler}\n        prevButtonHandler={prevButtonHandler}\n        nextButtonHandler={nextButtonHandler}\n      />\n    </div>\n  );\n};\n\nDrawerContentContainer.propTypes = {\n  logout: PropTypes.func,\n  morningTimeChange: PropTypes.func,\n  eveningTimeChange: PropTypes.func,\n  dateChange: PropTypes.func,\n  fetchTodos: PropTypes.func,\n  addPreviousDayTodos: PropTypes.func,\n  updateNotificationTime: PropTypes.func,\n  user: PropTypes.instanceOf(Object),\n  previousDayTodos: PropTypes.instanceOf(Array),\n  date: PropTypes.string,\n  changedMorningTime: PropTypes.string,\n  changedEveningTime: PropTypes.string,\n  addPendingPreviousDayTodos: PropTypes.bool,\n};\n\nDrawerContentContainer.defaultProps = {\n  logout: noop,\n  morningTimeChange: noop,\n  eveningTimeChange: noop,\n  dateChange: noop,\n  fetchTodos: noop,\n  addPreviousDayTodos: noop,\n  updateNotificationTime: noop,\n  user: {},\n  previousDayTodos: [],\n  date: '',\n  changedMorningTime: '',\n  changedEveningTime: '',\n  addPendingPreviousDayTodos: false,\n};\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  date: state.todo.date,\n  changedMorningTime: state.notification.changedMorningTime,\n  changedEveningTime: state.notification.changedEveningTime,\n  todos: state.todo.todos,\n  previousDayTodos: state.todo.previousDayTodos,\n  previousDay: state.todo.previousDay,\n  addPendingPreviousDayTodos: state.todo.addPendingPreviousDayTodos,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  morningTimeChange: date => dispatch(morningTimeChange(date)),\n  eveningTimeChange: date => dispatch(eveningTimeChange(date)),\n  logout: () => dispatch(logout()),\n  dateChange: date => dispatch(dateChange(date)),\n  fetchTodos: (user, date) => dispatch(fetchTodos(user, date)),\n  addPreviousDayTodos: () => dispatch(addPreviousDayTodos()),\n  updateNotificationTime: (user, mTime, eTime) => (\n    dispatch(updateNotificationTime(user, mTime, eTime))\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DrawerContentContainer);\n"]},"metadata":{},"sourceType":"module"}