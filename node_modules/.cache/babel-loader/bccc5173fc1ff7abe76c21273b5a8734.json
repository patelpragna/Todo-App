{"ast":null,"code":"var _jsxFileName = \"D:\\\\REACT JS\\\\React Upforce\\\\daily-todo-fb-final\\\\src\\\\routes\\\\ProtectedRoutes.js\";\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport firebase from '../firebase/firebase';\nexport default function (ComposedComponent) {\n  class Authentication extends Component {\n    componentDidMount() {\n      const _this$props = this.props,\n            history = _this$props.history,\n            userId = _this$props.userId;\n      const uid = localStorage.getItem('uid');\n      firebase.auth().onAuthStateChanged(currentUser => {\n        if (currentUser) {\n          if (!userId) {\n            localStorage.setItem('uid', uid);\n          } else if (userId) {\n            localStorage.setItem('uid', userId);\n          }\n        } else {\n          history.push('/login');\n        }\n      });\n    }\n\n    render() {\n      return React.createElement(React.Fragment, null, React.createElement(ComposedComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  Authentication.propTypes = {\n    history: PropTypes.instanceOf(Object).isRequired,\n    userId: PropTypes.string\n  };\n  Authentication.defaultProps = {\n    userId: ''\n  };\n\n  const mapstateToProps = state => ({\n    userId: state.auth.userId\n  });\n\n  return connect(mapstateToProps, null)(withRouter(Authentication));\n}","map":{"version":3,"sources":["D:/REACT JS/React Upforce/daily-todo-fb-final/src/routes/ProtectedRoutes.js"],"names":["React","Component","connect","withRouter","PropTypes","firebase","ComposedComponent","Authentication","componentDidMount","props","history","userId","uid","localStorage","getItem","auth","onAuthStateChanged","currentUser","setItem","push","render","propTypes","instanceOf","Object","isRequired","string","defaultProps","mapstateToProps","state"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,eAAe,UAAUC,iBAAV,EAA6B;AAC1C,QAAMC,cAAN,SAA6BN,SAA7B,CAAuC;AACrCO,IAAAA,iBAAiB,GAAG;AAAA,0BACU,KAAKC,KADf;AAAA,YACVC,OADU,eACVA,OADU;AAAA,YACDC,MADC,eACDA,MADC;AAElB,YAAMC,GAAG,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAZ;AACAT,MAAAA,QAAQ,CAACU,IAAT,GAAgBC,kBAAhB,CAAmCC,WAAW,IAAI;AAChD,YAAIA,WAAJ,EAAiB;AACf,cAAI,CAACN,MAAL,EAAa;AACXE,YAAAA,YAAY,CAACK,OAAb,CAAqB,KAArB,EAA4BN,GAA5B;AACD,WAFD,MAEO,IAAID,MAAJ,EAAY;AACjBE,YAAAA,YAAY,CAACK,OAAb,CAAqB,KAArB,EAA4BP,MAA5B;AACD;AACF,SAND,MAMO;AACLD,UAAAA,OAAO,CAACS,IAAR,CAAa,QAAb;AACD;AACF,OAVD;AAWD;;AAEDC,IAAAA,MAAM,GAAG;AACP,aACE,0CACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;AAvBoC;;AA0BvCb,EAAAA,cAAc,CAACc,SAAf,GAA2B;AACzBX,IAAAA,OAAO,EAAEN,SAAS,CAACkB,UAAV,CAAqBC,MAArB,EAA6BC,UADb;AAEzBb,IAAAA,MAAM,EAAEP,SAAS,CAACqB;AAFO,GAA3B;AAKAlB,EAAAA,cAAc,CAACmB,YAAf,GAA8B;AAC5Bf,IAAAA,MAAM,EAAE;AADoB,GAA9B;;AAIA,QAAMgB,eAAe,GAAGC,KAAK,KAAK;AAChCjB,IAAAA,MAAM,EAAEiB,KAAK,CAACb,IAAN,CAAWJ;AADa,GAAL,CAA7B;;AAIA,SAAOT,OAAO,CAACyB,eAAD,EAAkB,IAAlB,CAAP,CAA+BxB,UAAU,CAACI,cAAD,CAAzC,CAAP;AACD","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport firebase from '../firebase/firebase';\n\nexport default function (ComposedComponent) {\n  class Authentication extends Component {\n    componentDidMount() {\n      const { history, userId } = this.props;\n      const uid = localStorage.getItem('uid');\n      firebase.auth().onAuthStateChanged(currentUser => {\n        if (currentUser) {\n          if (!userId) {\n            localStorage.setItem('uid', uid);\n          } else if (userId) {\n            localStorage.setItem('uid', userId);\n          }\n        } else {\n          history.push('/login');\n        }\n      });\n    }\n\n    render() {\n      return (\n        <>\n          <ComposedComponent />\n        </>\n      );\n    }\n  }\n\n  Authentication.propTypes = {\n    history: PropTypes.instanceOf(Object).isRequired,\n    userId: PropTypes.string,\n  };\n\n  Authentication.defaultProps = {\n    userId: '',\n  };\n\n  const mapstateToProps = state => ({\n    userId: state.auth.userId,\n  });\n\n  return connect(mapstateToProps, null)(withRouter(Authentication));\n}\n"]},"metadata":{},"sourceType":"module"}