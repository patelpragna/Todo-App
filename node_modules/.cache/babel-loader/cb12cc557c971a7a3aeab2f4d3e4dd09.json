{"ast":null,"code":"import _slicedToArray from \"D:\\\\REACT JS\\\\React Upforce\\\\daily-todo-fb-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\REACT JS\\\\React Upforce\\\\daily-todo-fb-final\\\\src\\\\modules\\\\Home\\\\TodoList\\\\TodoListItem\\\\TodoListItemContainer.js\";\n\n/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport TodoListItem from './TodoListItem';\nimport { deleteTodo, markDone, editTodo } from '../../../../redux/todoActions';\nimport { noop, formatedDate } from '../../../../utils';\nimport ConfirmDeleteDialog from '../../../../shared/Dialog/ConfirmDeleteDialog';\n\nconst TodoListItemContainer = ({\n  deleteTodo,\n  markDone,\n  editTodo,\n  user,\n  todo,\n  date,\n  refresh\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        openDeleteDialog = _useState2[0],\n        setOpenDeleteDialog = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        contactId = _useState4[0],\n        setContactId = _useState4[1];\n\n  const deleteTodoButtonHandler = (e, id) => {\n    setContactId(id);\n    setOpenDeleteDialog(true);\n  };\n\n  const markTodoDoneButtonHandler = (e, todo) => {\n    const createdDate = formatedDate(todo.createdAt);\n\n    if (createdDate === date) {\n      markDone(todo, user, date);\n    } else {\n      markDone(todo, user, createdDate);\n    }\n  };\n\n  const editTodoButtonHandler = (e, todo) => {\n    editTodo(todo.id);\n  };\n\n  const handleConfirmDeleteDialogClose = () => {\n    setOpenDeleteDialog(false);\n  };\n\n  const confirmDeleteDialogHandler = () => {\n    deleteTodo(user, contactId, date);\n    setOpenDeleteDialog(false);\n  };\n\n  const calendarStrings = {\n    lastDay: 'll [at] LT',\n    sameDay: '[Today at] LT',\n    nextDay: 'll [at] LT',\n    lastWeek: 'll [at] LT',\n    nextWeek: 'll [at] LT',\n    sameElse: 'll [at] LT'\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(ConfirmDeleteDialog, {\n    handleClose: handleConfirmDeleteDialogClose,\n    confirmDeleteDialogHandler: confirmDeleteDialogHandler,\n    open: openDeleteDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(TodoListItem, {\n    calendarStrings: calendarStrings,\n    deleteTodoButtonHandler: deleteTodoButtonHandler,\n    markTodoDoneButtonHandler: markTodoDoneButtonHandler,\n    editTodoButtonHandler: editTodoButtonHandler,\n    todo: todo,\n    user: user,\n    date: date,\n    refresh: refresh,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }));\n};\n\nTodoListItemContainer.propTypes = {\n  deleteTodo: PropTypes.func,\n  markDone: PropTypes.func,\n  editTodo: PropTypes.func,\n  user: PropTypes.instanceOf(Object),\n  todo: PropTypes.instanceOf(Object),\n  date: PropTypes.string,\n  refresh: PropTypes.bool\n};\nTodoListItemContainer.defaultProps = {\n  deleteTodo: noop,\n  markDone: noop,\n  editTodo: noop,\n  user: {},\n  todo: {},\n  date: '',\n  refresh: false\n};\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  date: state.todo.date\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteTodo: (user, id, date) => dispatch(deleteTodo(user, id, date)),\n  markDone: (todo, user, date) => dispatch(markDone(todo, user, date)),\n  editTodo: id => dispatch(editTodo(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListItemContainer);","map":{"version":3,"sources":["D:/REACT JS/React Upforce/daily-todo-fb-final/src/modules/Home/TodoList/TodoListItem/TodoListItemContainer.js"],"names":["React","useState","connect","PropTypes","TodoListItem","deleteTodo","markDone","editTodo","noop","formatedDate","ConfirmDeleteDialog","TodoListItemContainer","user","todo","date","refresh","openDeleteDialog","setOpenDeleteDialog","contactId","setContactId","deleteTodoButtonHandler","e","id","markTodoDoneButtonHandler","createdDate","createdAt","editTodoButtonHandler","handleConfirmDeleteDialogClose","confirmDeleteDialogHandler","calendarStrings","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","propTypes","func","instanceOf","Object","string","bool","defaultProps","mapStateToProps","state","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport TodoListItem from './TodoListItem';\n\nimport { deleteTodo, markDone, editTodo } from '../../../../redux/todoActions';\nimport { noop, formatedDate } from '../../../../utils';\nimport ConfirmDeleteDialog from '../../../../shared/Dialog/ConfirmDeleteDialog';\n\n\nconst TodoListItemContainer = ({\n  deleteTodo,\n  markDone,\n  editTodo,\n  user,\n  todo,\n  date,\n  refresh,\n\n}) => {\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\n  const [contactId, setContactId] = useState('');\n  const deleteTodoButtonHandler = (e, id) => {\n    setContactId(id);\n    setOpenDeleteDialog(true);\n  };\n\n  const markTodoDoneButtonHandler = (e, todo) => {\n    const createdDate = formatedDate(todo.createdAt);\n    if (createdDate === date) {\n      markDone(todo, user, date);\n    } else {\n      markDone(todo, user, createdDate);\n    }\n  };\n\n  const editTodoButtonHandler = (e, todo) => {\n    editTodo(todo.id);\n  };\n\n  const handleConfirmDeleteDialogClose = () => {\n    setOpenDeleteDialog(false);\n  };\n\n  const confirmDeleteDialogHandler = () => {\n    deleteTodo(user, contactId, date);\n    setOpenDeleteDialog(false);\n  };\n\n  const calendarStrings = {\n    lastDay: 'll [at] LT',\n    sameDay: '[Today at] LT',\n    nextDay: 'll [at] LT',\n    lastWeek: 'll [at] LT',\n    nextWeek: 'll [at] LT',\n    sameElse: 'll [at] LT',\n  };\n  return (\n    <div>\n      <ConfirmDeleteDialog\n        handleClose={handleConfirmDeleteDialogClose}\n        confirmDeleteDialogHandler={confirmDeleteDialogHandler}\n        open={openDeleteDialog}\n      />\n      <TodoListItem\n        calendarStrings={calendarStrings}\n        deleteTodoButtonHandler={deleteTodoButtonHandler}\n        markTodoDoneButtonHandler={markTodoDoneButtonHandler}\n        editTodoButtonHandler={editTodoButtonHandler}\n        todo={todo}\n        user={user}\n        date={date}\n        refresh={refresh}\n      />\n    </div>\n  );\n};\n\nTodoListItemContainer.propTypes = {\n  deleteTodo: PropTypes.func,\n  markDone: PropTypes.func,\n  editTodo: PropTypes.func,\n  user: PropTypes.instanceOf(Object),\n  todo: PropTypes.instanceOf(Object),\n  date: PropTypes.string,\n  refresh: PropTypes.bool,\n};\n\nTodoListItemContainer.defaultProps = {\n  deleteTodo: noop,\n  markDone: noop,\n  editTodo: noop,\n  user: {},\n  todo: {},\n  date: '',\n  refresh: false,\n};\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  date: state.todo.date,\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteTodo: (user, id, date) => dispatch(deleteTodo(user, id, date)),\n  markDone: (todo, user, date) => dispatch(markDone(todo, user, date)),\n  editTodo: id => dispatch(editTodo(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListItemContainer);\n"]},"metadata":{},"sourceType":"module"}