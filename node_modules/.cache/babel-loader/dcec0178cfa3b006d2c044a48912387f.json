{"ast":null,"code":"import _slicedToArray from \"D:\\\\REACT JS\\\\React Upforce\\\\daily-todo-fb-final\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\REACT JS\\\\React Upforce\\\\daily-todo-fb-final\\\\src\\\\modules\\\\Home\\\\TodoList\\\\TodoListContainer.js\";\n\n/* eslint-disable no-shadow */\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { CronJob } from 'cron';\nimport { makeStyles } from '@material-ui/core/styles';\nimport BlockUi from 'react-block-ui';\nimport 'react-block-ui/style.css';\nimport { Loader } from 'react-loaders';\nimport 'loaders.css/loaders.min.css';\nimport copy from 'copy-to-clipboard';\nimport PendingTodoDialog from '../../../shared/Dialog/PendingTodoDialog';\nimport TodoList from './TodoList';\nimport NoData from '../../../shared/NoData';\nimport { copyToClipboard, toastClose } from '../../../redux/todoActions';\nimport { addPreviousDayTodos, noAddPreviousDayTodos, openPendingTodo, closePendingTodo } from '../../../redux/previousdayActions';\nimport { noop, todoFormatter, copyTodoToast, checkForTime } from '../../../utils';\nconst useStyles = makeStyles({\n  blockUi: {\n    minHeight: '100vh'\n  }\n});\n\nconst TodoListContainer = ({\n  addPreviousDayTodos,\n  noAddPreviousDayTodos,\n  toastClose,\n  openPendingTodo,\n  closePendingTodo,\n  copyToClipboard,\n  todos,\n  previousDayTodos,\n  fetchTodoLoading,\n  deleteTodoLoading,\n  openPendingTodoDialog,\n  copyBtnText,\n  date\n}) => {\n  const todosRef = useRef();\n  const classes = useStyles();\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        refresh = _useState2[0],\n        setRefresh = _useState2[1];\n\n  useEffect(() => {\n    const job = new CronJob('00 */2 * * * *', () => {\n      setRefresh(prevRefresh => !prevRefresh);\n    });\n    job.start();\n  }, []);\n  useEffect(() => {\n    todosRef.current = todos;\n    const filteredTodos = todosRef.current.filter(todo => todo.isDone === false);\n    filteredTodos.map(todo => {\n      const job = new CronJob('*/10 * * * * *', () => {\n        checkForTime(todo.todo);\n      });\n      job.start();\n    });\n  }, [todos]);\n  useEffect(() => {\n    openPendingTodo();\n  }, []);\n\n  const copyButtonHandler = () => {\n    const formatedTodos = todoFormatter(todos);\n    copyToClipboard();\n    copyTodoToast(date, toastClose);\n    copy(formatedTodos);\n  };\n\n  const noButtonHandler = () => {\n    noAddPreviousDayTodos();\n    closePendingTodo();\n  };\n\n  const yesButtonHandler = () => {\n    addPreviousDayTodos();\n    closePendingTodo();\n  };\n\n  return React.createElement(BlockUi, {\n    className: classes.blockUi,\n    tag: \"div\",\n    blocking: fetchTodoLoading || deleteTodoLoading,\n    loader: React.createElement(Loader, {\n      active: true,\n      type: \"line-scale-party\",\n      color: \"#3f51b5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }),\n    renderChildren: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, previousDayTodos && previousDayTodos.length !== 0 && React.createElement(PendingTodoDialog, {\n    noButtonHandler: noButtonHandler,\n    yesButtonHandler: yesButtonHandler,\n    open: openPendingTodoDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), todos && todos.length !== 0 && !fetchTodoLoading ? React.createElement(TodoList, {\n    todos: todos,\n    refresh: refresh,\n    copyButtonHandler: copyButtonHandler,\n    copyBtnText: copyBtnText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }) : React.createElement(NoData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }));\n};\n\nTodoListContainer.propTypes = {\n  copyToClipboard: PropTypes.func,\n  toastClose: PropTypes.func,\n  addPreviousDayTodos: PropTypes.func,\n  noAddPreviousDayTodos: PropTypes.func,\n  openPendingTodo: PropTypes.func,\n  closePendingTodo: PropTypes.func,\n  todos: PropTypes.instanceOf(Array),\n  previousDayTodos: PropTypes.instanceOf(Array),\n  fetchTodoLoading: PropTypes.bool,\n  deleteTodoLoading: PropTypes.bool,\n  openPendingTodoDialog: PropTypes.bool,\n  copyBtnText: PropTypes.string,\n  date: PropTypes.string\n};\nTodoListContainer.defaultProps = {\n  copyToClipboard: noop,\n  toastClose: noop,\n  addPreviousDayTodos: noop,\n  noAddPreviousDayTodos: noop,\n  openPendingTodo: noop,\n  closePendingTodo: noop,\n  todos: [],\n  previousDayTodos: [],\n  fetchTodoLoading: false,\n  deleteTodoLoading: false,\n  openPendingTodoDialog: false,\n  copyBtnText: '',\n  date: ''\n};\n\nconst mapStateToProps = state => ({\n  todos: state.todo.todos,\n  fetchTodoLoading: state.todo.fetchTodoLoading,\n  deleteTodoLoading: state.todo.deleteTodoLoading,\n  copyBtnText: state.todo.copyBtnText,\n  copiedTodo: state.todo.copiedTodo,\n  date: state.todo.date,\n  openPendingTodoDialog: state.todo.openPendingTodoDialog,\n  previousDayTodos: state.todo.previousDayTodos\n});\n\nconst mapDispatchToProps = dispatch => ({\n  copyToClipboard: todos => dispatch(copyToClipboard(todos)),\n  toastClose: () => dispatch(toastClose()),\n  addPreviousDayTodos: () => dispatch(addPreviousDayTodos()),\n  noAddPreviousDayTodos: () => dispatch(noAddPreviousDayTodos()),\n  openPendingTodo: () => dispatch(openPendingTodo()),\n  closePendingTodo: () => dispatch(closePendingTodo())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListContainer);","map":{"version":3,"sources":["D:/REACT JS/React Upforce/daily-todo-fb-final/src/modules/Home/TodoList/TodoListContainer.js"],"names":["React","useEffect","useState","useRef","PropTypes","connect","CronJob","makeStyles","BlockUi","Loader","copy","PendingTodoDialog","TodoList","NoData","copyToClipboard","toastClose","addPreviousDayTodos","noAddPreviousDayTodos","openPendingTodo","closePendingTodo","noop","todoFormatter","copyTodoToast","checkForTime","useStyles","blockUi","minHeight","TodoListContainer","todos","previousDayTodos","fetchTodoLoading","deleteTodoLoading","openPendingTodoDialog","copyBtnText","date","todosRef","classes","refresh","setRefresh","job","prevRefresh","start","current","filteredTodos","filter","todo","isDone","map","copyButtonHandler","formatedTodos","noButtonHandler","yesButtonHandler","length","propTypes","func","instanceOf","Array","bool","string","defaultProps","mapStateToProps","state","copiedTodo","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { CronJob } from 'cron';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport BlockUi from 'react-block-ui';\nimport 'react-block-ui/style.css';\nimport { Loader } from 'react-loaders';\nimport 'loaders.css/loaders.min.css';\nimport copy from 'copy-to-clipboard';\n\nimport PendingTodoDialog from '../../../shared/Dialog/PendingTodoDialog';\nimport TodoList from './TodoList';\nimport NoData from '../../../shared/NoData';\nimport { copyToClipboard, toastClose } from '../../../redux/todoActions';\nimport {\n  addPreviousDayTodos,\n  noAddPreviousDayTodos,\n  openPendingTodo,\n  closePendingTodo,\n} from '../../../redux/previousdayActions';\nimport { noop, todoFormatter, copyTodoToast, checkForTime } from '../../../utils';\n\nconst useStyles = makeStyles({\n  blockUi: {\n    minHeight: '100vh',\n  },\n});\n\nconst TodoListContainer = ({\n  addPreviousDayTodos,\n  noAddPreviousDayTodos,\n  toastClose,\n  openPendingTodo,\n  closePendingTodo,\n  copyToClipboard,\n  todos,\n  previousDayTodos,\n  fetchTodoLoading,\n  deleteTodoLoading,\n  openPendingTodoDialog,\n  copyBtnText,\n  date,\n}) => {\n  const todosRef = useRef();\n  const classes = useStyles();\n  const [refresh, setRefresh] = useState(false);\n\n  useEffect(() => {\n    const job = new CronJob('00 */2 * * * *', (() => {\n      setRefresh(prevRefresh => !prevRefresh);\n    }));\n    job.start();\n  }, []);\n\n  useEffect(() => {\n    todosRef.current = todos;\n    const filteredTodos = todosRef.current.filter(todo => todo.isDone === false);\n    filteredTodos.map(todo => {\n      const job = new CronJob('*/10 * * * * *', (() => {\n        checkForTime(todo.todo);\n      }));\n      job.start();\n    });\n  }, [todos]);\n\n  useEffect(() => {\n    openPendingTodo();\n  }, []);\n\n  const copyButtonHandler = () => {\n    const formatedTodos = todoFormatter(todos);\n    copyToClipboard();\n    copyTodoToast(date, toastClose);\n    copy(formatedTodos);\n  };\n\n  const noButtonHandler = () => {\n    noAddPreviousDayTodos();\n    closePendingTodo();\n  };\n\n  const yesButtonHandler = () => {\n    addPreviousDayTodos();\n    closePendingTodo();\n  };\n\n  return (\n    <BlockUi\n      className={classes.blockUi}\n      tag=\"div\"\n      blocking={fetchTodoLoading || deleteTodoLoading}\n      loader={<Loader active type=\"line-scale-party\" color=\"#3f51b5\" />}\n      renderChildren={false}\n    >\n      {\n        (previousDayTodos && previousDayTodos.length !== 0)\n        && (\n          <PendingTodoDialog\n            noButtonHandler={noButtonHandler}\n            yesButtonHandler={yesButtonHandler}\n            open={openPendingTodoDialog}\n          />\n        )\n      }\n      {\n        (todos && todos.length !== 0 && !fetchTodoLoading)\n          ? (\n            <TodoList\n              todos={todos}\n              refresh={refresh}\n              copyButtonHandler={copyButtonHandler}\n              copyBtnText={copyBtnText}\n            />\n          )\n          : <NoData />\n      }\n    </BlockUi>\n  );\n};\n\nTodoListContainer.propTypes = {\n  copyToClipboard: PropTypes.func,\n  toastClose: PropTypes.func,\n  addPreviousDayTodos: PropTypes.func,\n  noAddPreviousDayTodos: PropTypes.func,\n  openPendingTodo: PropTypes.func,\n  closePendingTodo: PropTypes.func,\n  todos: PropTypes.instanceOf(Array),\n  previousDayTodos: PropTypes.instanceOf(Array),\n  fetchTodoLoading: PropTypes.bool,\n  deleteTodoLoading: PropTypes.bool,\n  openPendingTodoDialog: PropTypes.bool,\n  copyBtnText: PropTypes.string,\n  date: PropTypes.string,\n};\n\nTodoListContainer.defaultProps = {\n  copyToClipboard: noop,\n  toastClose: noop,\n  addPreviousDayTodos: noop,\n  noAddPreviousDayTodos: noop,\n  openPendingTodo: noop,\n  closePendingTodo: noop,\n  todos: [],\n  previousDayTodos: [],\n  fetchTodoLoading: false,\n  deleteTodoLoading: false,\n  openPendingTodoDialog: false,\n  copyBtnText: '',\n  date: '',\n};\n\nconst mapStateToProps = state => ({\n  todos: state.todo.todos,\n  fetchTodoLoading: state.todo.fetchTodoLoading,\n  deleteTodoLoading: state.todo.deleteTodoLoading,\n  copyBtnText: state.todo.copyBtnText,\n  copiedTodo: state.todo.copiedTodo,\n  date: state.todo.date,\n  openPendingTodoDialog: state.todo.openPendingTodoDialog,\n  previousDayTodos: state.todo.previousDayTodos,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  copyToClipboard: todos => dispatch(copyToClipboard(todos)),\n  toastClose: () => dispatch(toastClose()),\n  addPreviousDayTodos: () => dispatch(addPreviousDayTodos()),\n  noAddPreviousDayTodos: () => dispatch(noAddPreviousDayTodos()),\n  openPendingTodo: () => dispatch(openPendingTodo()),\n  closePendingTodo: () => dispatch(closePendingTodo()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoListContainer);\n"]},"metadata":{},"sourceType":"module"}